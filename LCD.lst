CCS PCM C Compiler, Version 4.120, 5967               14-jan-13 19:12

               Filename: C:\BACKUP DIEGO\Documents\Projetos ou Proteus\LCD16x2 4bits\LCD.lst

               ROM used: 411 words (5%)
                         Largest free fragment is 2048
               RAM used: 6 (2%) at main() level
                         8 (2%) worst case
               Stack:    3 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   131
0003:  NOP
.................... /* 
.................... SANTA CRUZ DO SUL - RS 
.................... Autor: Diego Cardoso 
.................... Design in CCS 
.................... */ 
.................... //------------------------// 
.................... //CONFIGURACOES DO PIC 
.................... //------------------------// 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES XT                       //Crystal osc <= 4mhz for PCM/PCH , 3mhz to 10 mhz for PCD 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
....................  
.................... #use delay(clock=4000000) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... //------------------------------// 
.................... //DEFINICAO DE ATALHOS UTILIZADOS 
.................... //-----------------------------// 
.................... #define rs pin_b0 
.................... #define en pin_b1 
....................  
.................... //-----------------------------// 
.................... //CABECALHOS DE FUNCOES PARA SIMPLIFICACAO 
.................... //-----------------------------// 
.................... void lcd_comandos(unsigned int8 dado); 
.................... void lcd_dados(unsigned int8 dado); 
.................... void lcd_inicia(void); 
....................  
.................... //------------------------------// 
.................... //VARIAVEIS CUNHO GLOBAL 
.................... //-----------------------------// 
....................     
.................... void main() 
.................... { 
*
0131:  CLRF   04
0132:  BCF    03.7
0133:  MOVLW  1F
0134:  ANDWF  03,F
0135:  MOVLW  FF
0136:  MOVWF  20
0137:  BSF    03.5
0138:  BSF    1F.0
0139:  BSF    1F.1
013A:  BSF    1F.2
013B:  BCF    1F.3
013C:  MOVLW  07
013D:  MOVWF  1C
.................... //------------------------// 
.................... //CONFIGURACOES UTILIZADAS 
.................... //-----------------------// 
....................    setup_adc_ports(NO_ANALOGS); 
013E:  BSF    1F.0
013F:  BSF    1F.1
0140:  BSF    1F.2
0141:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
0142:  BCF    1F.6
0143:  BCF    03.5
0144:  BCF    1F.6
0145:  BSF    1F.7
0146:  BSF    03.5
0147:  BCF    1F.7
0148:  BCF    03.5
0149:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
014A:  BSF    03.5
014B:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
014C:  BCF    03.5
014D:  BCF    14.5
014E:  BCF    20.5
014F:  MOVF   20,W
0150:  BSF    03.5
0151:  MOVWF  07
0152:  BCF    03.5
0153:  BSF    20.4
0154:  MOVF   20,W
0155:  BSF    03.5
0156:  MOVWF  07
0157:  BCF    03.5
0158:  BCF    20.3
0159:  MOVF   20,W
015A:  BSF    03.5
015B:  MOVWF  07
015C:  MOVLW  01
015D:  BCF    03.5
015E:  MOVWF  14
015F:  MOVLW  00
0160:  BSF    03.5
0161:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
0162:  MOVF   01,W
0163:  ANDLW  C7
0164:  IORLW  08
0165:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0166:  BCF    03.5
0167:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0168:  MOVLW  00
0169:  MOVWF  78
016A:  MOVWF  12
016B:  MOVLW  00
016C:  BSF    03.5
016D:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
016E:  MOVLW  07
016F:  MOVWF  1C
0170:  MOVF   05,W
0171:  MOVWF  05
0172:  MOVLW  03
0173:  MOVWF  77
0174:  DECFSZ 77,F
0175:  GOTO   174
0176:  MOVF   1C,W
0177:  BCF    03.5
0178:  BCF    0D.6
....................    setup_vref(FALSE); 
0179:  BSF    03.5
017A:  CLRF   1D
....................    lcd_inicia(); 
017B:  BCF    03.5
017C:  GOTO   089
....................    lcd_comandos(0x40);    //GRAU! (°) 
017D:  MOVLW  40
017E:  MOVWF  21
017F:  CALL   019
....................    lcd_dados(0b00000110); 
0180:  MOVLW  06
0181:  MOVWF  21
0182:  CALL   0C4
....................    lcd_dados(0b00001001); 
0183:  MOVLW  09
0184:  MOVWF  21
0185:  CALL   0C4
....................    lcd_dados(0b00001001); 
0186:  MOVLW  09
0187:  MOVWF  21
0188:  CALL   0C4
....................    lcd_dados(0b00000110); 
0189:  MOVLW  06
018A:  MOVWF  21
018B:  CALL   0C4
....................    lcd_dados(0b00000000); 
018C:  CLRF   21
018D:  CALL   0C4
....................    lcd_dados(0b00000000); 
018E:  CLRF   21
018F:  CALL   0C4
....................    lcd_dados(0b00000000); 
0190:  CLRF   21
0191:  CALL   0C4
....................    lcd_dados(0b00000000); //linha cursor 
0192:  CLRF   21
0193:  CALL   0C4
....................    lcd_comandos(0x01); 
0194:  MOVLW  01
0195:  MOVWF  21
0196:  CALL   019
....................     
.................... while(TRUE){ 
....................    printf(lcd_dados,"%c",0x00); 
0197:  CLRF   21
0198:  CALL   0C4
.................... } 
0199:  GOTO   197
.................... } 
....................  
.................... //------------------------------// 
.................... //FUNCOES PARA SIMPLIFICACAO 
.................... //-----------------------------// 
....................  
.................... void lcd_comandos(unsigned int8 dado){     //HABILITA COMANDO 
....................    output_low(rs); 
*
0019:  BSF    03.5
001A:  BCF    06.0
001B:  BCF    03.5
001C:  BCF    06.0
*
019A:  SLEEP
....................    if (bit_test(dado,7)==0){ 
*
001D:  BTFSC  21.7
001E:  GOTO   024
....................       output_low(pin_d7); 
001F:  BSF    03.5
0020:  BCF    08.7
0021:  BCF    03.5
0022:  BCF    08.7
....................    }else 
0023:  GOTO   028
....................       output_high(pin_d7); 
0024:  BSF    03.5
0025:  BCF    08.7
0026:  BCF    03.5
0027:  BSF    08.7
....................    if (bit_test(dado,6)==0){ 
0028:  BTFSC  21.6
0029:  GOTO   02F
....................       output_low(pin_d6); 
002A:  BSF    03.5
002B:  BCF    08.6
002C:  BCF    03.5
002D:  BCF    08.6
....................    }else 
002E:  GOTO   033
....................       output_high(pin_d6); 
002F:  BSF    03.5
0030:  BCF    08.6
0031:  BCF    03.5
0032:  BSF    08.6
....................    if (bit_test(dado,5)==0){ 
0033:  BTFSC  21.5
0034:  GOTO   03A
....................       output_low(pin_d5); 
0035:  BSF    03.5
0036:  BCF    08.5
0037:  BCF    03.5
0038:  BCF    08.5
....................    }else 
0039:  GOTO   03E
....................       output_high(pin_d5); 
003A:  BSF    03.5
003B:  BCF    08.5
003C:  BCF    03.5
003D:  BSF    08.5
....................    if (bit_test(dado,4)==0){ 
003E:  BTFSC  21.4
003F:  GOTO   045
....................       output_low(pin_d4); 
0040:  BSF    03.5
0041:  BCF    08.4
0042:  BCF    03.5
0043:  BCF    08.4
....................    }else 
0044:  GOTO   049
....................       output_high(pin_d4); 
0045:  BSF    03.5
0046:  BCF    08.4
0047:  BCF    03.5
0048:  BSF    08.4
....................     
....................    output_high(en); 
0049:  BSF    03.5
004A:  BCF    06.1
004B:  BCF    03.5
004C:  BSF    06.1
....................    output_low(en); 
004D:  BSF    03.5
004E:  BCF    06.1
004F:  BCF    03.5
0050:  BCF    06.1
....................     
....................    if (bit_test(dado,3)==0){ 
0051:  BTFSC  21.3
0052:  GOTO   058
....................       output_low(pin_d7); 
0053:  BSF    03.5
0054:  BCF    08.7
0055:  BCF    03.5
0056:  BCF    08.7
....................    }else 
0057:  GOTO   05C
....................       output_high(pin_d7); 
0058:  BSF    03.5
0059:  BCF    08.7
005A:  BCF    03.5
005B:  BSF    08.7
....................    if (bit_test(dado,2)==0){ 
005C:  BTFSC  21.2
005D:  GOTO   063
....................       output_low(pin_d6); 
005E:  BSF    03.5
005F:  BCF    08.6
0060:  BCF    03.5
0061:  BCF    08.6
....................    }else 
0062:  GOTO   067
....................       output_high(pin_d6); 
0063:  BSF    03.5
0064:  BCF    08.6
0065:  BCF    03.5
0066:  BSF    08.6
....................    if (bit_test(dado,1)==0){ 
0067:  BTFSC  21.1
0068:  GOTO   06E
....................       output_low(pin_d5); 
0069:  BSF    03.5
006A:  BCF    08.5
006B:  BCF    03.5
006C:  BCF    08.5
....................    }else 
006D:  GOTO   072
....................       output_high(pin_d5); 
006E:  BSF    03.5
006F:  BCF    08.5
0070:  BCF    03.5
0071:  BSF    08.5
....................    if (bit_test(dado,0)==0){ 
0072:  BTFSC  21.0
0073:  GOTO   079
....................       output_low(pin_d4); 
0074:  BSF    03.5
0075:  BCF    08.4
0076:  BCF    03.5
0077:  BCF    08.4
....................    }else 
0078:  GOTO   07D
....................       output_high(pin_d4); 
0079:  BSF    03.5
007A:  BCF    08.4
007B:  BCF    03.5
007C:  BSF    08.4
....................        
....................    output_high(en); 
007D:  BSF    03.5
007E:  BCF    06.1
007F:  BCF    03.5
0080:  BSF    06.1
....................    output_low(en); 
0081:  BSF    03.5
0082:  BCF    06.1
0083:  BCF    03.5
0084:  BCF    06.1
....................    delay_ms(2); 
0085:  MOVLW  02
0086:  MOVWF  22
0087:  CALL   004
.................... } 
0088:  RETURN
....................  
.................... void lcd_dados(unsigned int8 dado){     //HABILITA A ESCRITA 
....................    output_high(rs); 
*
00C4:  BSF    03.5
00C5:  BCF    06.0
00C6:  BCF    03.5
00C7:  BSF    06.0
....................     
....................    if (bit_test(dado,7)==0){ 
00C8:  BTFSC  21.7
00C9:  GOTO   0CF
....................       output_low(pin_d7); 
00CA:  BSF    03.5
00CB:  BCF    08.7
00CC:  BCF    03.5
00CD:  BCF    08.7
....................    }else 
00CE:  GOTO   0D3
....................       output_high(pin_d7); 
00CF:  BSF    03.5
00D0:  BCF    08.7
00D1:  BCF    03.5
00D2:  BSF    08.7
....................    if (bit_test(dado,6)==0){ 
00D3:  BTFSC  21.6
00D4:  GOTO   0DA
....................       output_low(pin_d6); 
00D5:  BSF    03.5
00D6:  BCF    08.6
00D7:  BCF    03.5
00D8:  BCF    08.6
....................    }else 
00D9:  GOTO   0DE
....................       output_high(pin_d6); 
00DA:  BSF    03.5
00DB:  BCF    08.6
00DC:  BCF    03.5
00DD:  BSF    08.6
....................    if (bit_test(dado,5)==0){ 
00DE:  BTFSC  21.5
00DF:  GOTO   0E5
....................       output_low(pin_d5); 
00E0:  BSF    03.5
00E1:  BCF    08.5
00E2:  BCF    03.5
00E3:  BCF    08.5
....................    }else 
00E4:  GOTO   0E9
....................       output_high(pin_d5); 
00E5:  BSF    03.5
00E6:  BCF    08.5
00E7:  BCF    03.5
00E8:  BSF    08.5
....................    if (bit_test(dado,4)==0){ 
00E9:  BTFSC  21.4
00EA:  GOTO   0F0
....................       output_low(pin_d4); 
00EB:  BSF    03.5
00EC:  BCF    08.4
00ED:  BCF    03.5
00EE:  BCF    08.4
....................    }else 
00EF:  GOTO   0F4
....................       output_high(pin_d4); 
00F0:  BSF    03.5
00F1:  BCF    08.4
00F2:  BCF    03.5
00F3:  BSF    08.4
....................     
....................    output_high(en); 
00F4:  BSF    03.5
00F5:  BCF    06.1
00F6:  BCF    03.5
00F7:  BSF    06.1
....................    output_low(en); 
00F8:  BSF    03.5
00F9:  BCF    06.1
00FA:  BCF    03.5
00FB:  BCF    06.1
....................     
....................    if (bit_test(dado,3)==0){ 
00FC:  BTFSC  21.3
00FD:  GOTO   103
....................       output_low(pin_d7); 
00FE:  BSF    03.5
00FF:  BCF    08.7
0100:  BCF    03.5
0101:  BCF    08.7
....................    }else 
0102:  GOTO   107
....................       output_high(pin_d7); 
0103:  BSF    03.5
0104:  BCF    08.7
0105:  BCF    03.5
0106:  BSF    08.7
....................    if (bit_test(dado,2)==0){ 
0107:  BTFSC  21.2
0108:  GOTO   10E
....................       output_low(pin_d6); 
0109:  BSF    03.5
010A:  BCF    08.6
010B:  BCF    03.5
010C:  BCF    08.6
....................    }else 
010D:  GOTO   112
....................       output_high(pin_d6); 
010E:  BSF    03.5
010F:  BCF    08.6
0110:  BCF    03.5
0111:  BSF    08.6
....................    if (bit_test(dado,1)==0){ 
0112:  BTFSC  21.1
0113:  GOTO   119
....................       output_low(pin_d5); 
0114:  BSF    03.5
0115:  BCF    08.5
0116:  BCF    03.5
0117:  BCF    08.5
....................    }else 
0118:  GOTO   11D
....................       output_high(pin_d5); 
0119:  BSF    03.5
011A:  BCF    08.5
011B:  BCF    03.5
011C:  BSF    08.5
....................    if (bit_test(dado,0)==0){ 
011D:  BTFSC  21.0
011E:  GOTO   124
....................       output_low(pin_d4); 
011F:  BSF    03.5
0120:  BCF    08.4
0121:  BCF    03.5
0122:  BCF    08.4
....................    }else 
0123:  GOTO   128
....................       output_high(pin_d4); 
0124:  BSF    03.5
0125:  BCF    08.4
0126:  BCF    03.5
0127:  BSF    08.4
....................        
....................    output_high(en); 
0128:  BSF    03.5
0129:  BCF    06.1
012A:  BCF    03.5
012B:  BSF    06.1
....................    output_low(en); 
012C:  BSF    03.5
012D:  BCF    06.1
012E:  BCF    03.5
012F:  BCF    06.1
.................... } 
0130:  RETURN
....................  
.................... void lcd_inicia(void){     //INICIA LCD 
....................    output_low(RS); 
*
0089:  BSF    03.5
008A:  BCF    06.0
008B:  BCF    03.5
008C:  BCF    06.0
....................    delay_ms(15);  //tempo de "power on" 
008D:  MOVLW  0F
008E:  MOVWF  22
008F:  CALL   004
....................    output_high(pin_d4); 
0090:  BSF    03.5
0091:  BCF    08.4
0092:  BCF    03.5
0093:  BSF    08.4
....................    output_high(pin_d5); 
0094:  BSF    03.5
0095:  BCF    08.5
0096:  BCF    03.5
0097:  BSF    08.5
....................    output_high(en);  //etapa1 
0098:  BSF    03.5
0099:  BCF    06.1
009A:  BCF    03.5
009B:  BSF    06.1
....................    output_low(en); 
009C:  BSF    03.5
009D:  BCF    06.1
009E:  BCF    03.5
009F:  BCF    06.1
....................    delay_ms(5); 
00A0:  MOVLW  05
00A1:  MOVWF  22
00A2:  CALL   004
....................    output_high(en);  //etapa2 
00A3:  BSF    03.5
00A4:  BCF    06.1
00A5:  BCF    03.5
00A6:  BSF    06.1
....................    output_low(en); 
00A7:  BSF    03.5
00A8:  BCF    06.1
00A9:  BCF    03.5
00AA:  BCF    06.1
....................    delay_us(100); 
00AB:  MOVLW  21
00AC:  MOVWF  77
00AD:  DECFSZ 77,F
00AE:  GOTO   0AD
....................     
....................    lcd_comandos(0x2);      //INTERFACE 4BITS 
00AF:  MOVLW  02
00B0:  MOVWF  21
00B1:  CALL   019
....................    lcd_comandos(0x28);     //DEFINE TAMANHO DO DISPLAY 
00B2:  MOVLW  28
00B3:  MOVWF  21
00B4:  CALL   019
....................    lcd_comandos(0x06);     //DEFINE TIPO DE ESCRITA 
00B5:  MOVLW  06
00B6:  MOVWF  21
00B7:  CALL   019
....................    lcd_comandos(0x0c);     //DESATIVA CURSOR 
00B8:  MOVLW  0C
00B9:  MOVWF  21
00BA:  CALL   019
....................    lcd_comandos(0x01);    //LIMPA TELA 
00BB:  MOVLW  01
00BC:  MOVWF  21
00BD:  CALL   019
....................    delay_ms(2); 
00BE:  MOVLW  02
00BF:  MOVWF  22
00C0:  CALL   004
.................... } 
00C1:  BCF    0A.3
00C2:  BCF    0A.4
00C3:  GOTO   17D (RETURN)
....................  

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
